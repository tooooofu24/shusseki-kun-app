/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Course } from './Course';
import {
    CourseFromJSON,
    CourseFromJSONTyped,
    CourseToJSON,
} from './Course';
import type { Student } from './Student';
import {
    StudentFromJSON,
    StudentFromJSONTyped,
    StudentToJSON,
} from './Student';

/**
 * 
 * @export
 * @interface Score
 */
export interface Score {
    /**
     * 
     * @type {Course}
     * @memberof Score
     */
    course: Course;
    /**
     * 
     * @type {Student}
     * @memberof Score
     */
    student: Student;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    attendanceRate: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    attendanceCount: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    absenceCount: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    knowledgeAverage: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    expressionAverage: number;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    attitudeAverage: number;
}

/**
 * Check if a given object implements the Score interface.
 */
export function instanceOfScore(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "course" in value;
    isInstance = isInstance && "student" in value;
    isInstance = isInstance && "attendanceRate" in value;
    isInstance = isInstance && "attendanceCount" in value;
    isInstance = isInstance && "absenceCount" in value;
    isInstance = isInstance && "knowledgeAverage" in value;
    isInstance = isInstance && "expressionAverage" in value;
    isInstance = isInstance && "attitudeAverage" in value;

    return isInstance;
}

export function ScoreFromJSON(json: any): Score {
    return ScoreFromJSONTyped(json, false);
}

export function ScoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): Score {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'course': CourseFromJSON(json['course']),
        'student': StudentFromJSON(json['student']),
        'attendanceRate': json['attendanceRate'],
        'attendanceCount': json['attendanceCount'],
        'absenceCount': json['absenceCount'],
        'knowledgeAverage': json['knowledgeAverage'],
        'expressionAverage': json['expressionAverage'],
        'attitudeAverage': json['attitudeAverage'],
    };
}

export function ScoreToJSON(value?: Score | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'course': CourseToJSON(value.course),
        'student': StudentToJSON(value.student),
        'attendanceRate': value.attendanceRate,
        'attendanceCount': value.attendanceCount,
        'absenceCount': value.absenceCount,
        'knowledgeAverage': value.knowledgeAverage,
        'expressionAverage': value.expressionAverage,
        'attitudeAverage': value.attitudeAverage,
    };
}

