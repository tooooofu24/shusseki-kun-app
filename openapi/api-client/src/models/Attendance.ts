/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CourseLog } from './CourseLog';
import {
    CourseLogFromJSON,
    CourseLogFromJSONTyped,
    CourseLogToJSON,
} from './CourseLog';
import type { Student } from './Student';
import {
    StudentFromJSON,
    StudentFromJSONTyped,
    StudentToJSON,
} from './Student';

/**
 * 
 * @export
 * @interface Attendance
 */
export interface Attendance {
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    id: number;
    /**
     * 
     * @type {CourseLog}
     * @memberof Attendance
     */
    courseLog: CourseLog;
    /**
     * 
     * @type {Student}
     * @memberof Attendance
     */
    student: Student;
    /**
     * 
     * @type {boolean}
     * @memberof Attendance
     */
    attend: boolean;
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    knowledge?: number;
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    expression?: number;
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    attitude?: number;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof Attendance
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Attendance
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the Attendance interface.
 */
export function instanceOfAttendance(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "courseLog" in value;
    isInstance = isInstance && "student" in value;
    isInstance = isInstance && "attend" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function AttendanceFromJSON(json: any): Attendance {
    return AttendanceFromJSONTyped(json, false);
}

export function AttendanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attendance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'courseLog': CourseLogFromJSON(json['courseLog']),
        'student': StudentFromJSON(json['student']),
        'attend': json['attend'],
        'knowledge': !exists(json, 'knowledge') ? undefined : json['knowledge'],
        'expression': !exists(json, 'expression') ? undefined : json['expression'],
        'attitude': !exists(json, 'attitude') ? undefined : json['attitude'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function AttendanceToJSON(value?: Attendance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'courseLog': CourseLogToJSON(value.courseLog),
        'student': StudentToJSON(value.student),
        'attend': value.attend,
        'knowledge': value.knowledge,
        'expression': value.expression,
        'attitude': value.attitude,
        'comment': value.comment,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

