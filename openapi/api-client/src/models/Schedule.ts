/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Course } from './Course';
import {
    CourseFromJSON,
    CourseFromJSONTyped,
    CourseToJSON,
} from './Course';

/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    day: number;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    dayEn: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    dayJa: string;
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    period: number;
    /**
     * 
     * @type {Course}
     * @memberof Schedule
     */
    course: Course;
    /**
     * 
     * @type {Date}
     * @memberof Schedule
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Schedule
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the Schedule interface.
 */
export function instanceOfSchedule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "day" in value;
    isInstance = isInstance && "dayEn" in value;
    isInstance = isInstance && "dayJa" in value;
    isInstance = isInstance && "period" in value;
    isInstance = isInstance && "course" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function ScheduleFromJSON(json: any): Schedule {
    return ScheduleFromJSONTyped(json, false);
}

export function ScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schedule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'day': json['day'],
        'dayEn': json['dayEn'],
        'dayJa': json['dayJa'],
        'period': json['period'],
        'course': CourseFromJSON(json['course']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ScheduleToJSON(value?: Schedule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'day': value.day,
        'dayEn': value.dayEn,
        'dayJa': value.dayJa,
        'period': value.period,
        'course': CourseToJSON(value.course),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

