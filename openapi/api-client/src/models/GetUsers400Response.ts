/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetUsers400Response
 */
export interface GetUsers400Response {
    /**
     * 
     * @type {string}
     * @memberof GetUsers400Response
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof GetUsers400Response
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUsers400Response
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUsers400Response
     */
    displayMessage?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUsers400Response
     */
    detail?: object;
}

/**
 * Check if a given object implements the GetUsers400Response interface.
 */
export function instanceOfGetUsers400Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GetUsers400ResponseFromJSON(json: any): GetUsers400Response {
    return GetUsers400ResponseFromJSONTyped(json, false);
}

export function GetUsers400ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetUsers400Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': !exists(json, 'error') ? undefined : json['error'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'displayMessage': !exists(json, 'displayMessage') ? undefined : json['displayMessage'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
    };
}

export function GetUsers400ResponseToJSON(value?: GetUsers400Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'code': value.code,
        'message': value.message,
        'displayMessage': value.displayMessage,
        'detail': value.detail,
    };
}

