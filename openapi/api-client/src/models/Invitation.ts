/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {number}
     * @memberof Invitation
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof Invitation
     */
    acceptFlag: boolean;
    /**
     * 
     * @type {User}
     * @memberof Invitation
     */
    createdBy?: User;
    /**
     * 
     * @type {User}
     * @memberof Invitation
     */
    updatedBy?: User;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the Invitation interface.
 */
export function instanceOfInvitation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "acceptFlag" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function InvitationFromJSON(json: any): Invitation {
    return InvitationFromJSONTyped(json, false);
}

export function InvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invitation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'acceptFlag': json['acceptFlag'],
        'createdBy': !exists(json, 'createdBy') ? undefined : UserFromJSON(json['createdBy']),
        'updatedBy': !exists(json, 'updatedBy') ? undefined : UserFromJSON(json['updatedBy']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function InvitationToJSON(value?: Invitation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'acceptFlag': value.acceptFlag,
        'createdBy': UserToJSON(value.createdBy),
        'updatedBy': UserToJSON(value.updatedBy),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

