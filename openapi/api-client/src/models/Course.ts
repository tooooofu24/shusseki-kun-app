/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { Classroom } from "./Classroom";
import {
  ClassroomFromJSON,
  ClassroomFromJSONTyped,
  ClassroomToJSON,
} from "./Classroom";
import type { Subject } from "./Subject";
import {
  SubjectFromJSON,
  SubjectFromJSONTyped,
  SubjectToJSON,
} from "./Subject";
import type { User } from "./User";
import { UserFromJSON, UserFromJSONTyped, UserToJSON } from "./User";

/**
 *
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {number}
   * @memberof Course
   */
  id: number;
  /**
   *
   * @type {User}
   * @memberof Course
   */
  user: User;
  /**
   *
   * @type {Classroom}
   * @memberof Course
   */
  classroom: Classroom;
  /**
   *
   * @type {Subject}
   * @memberof Course
   */
  subject: Subject;
  /**
   *
   * @type {Date}
   * @memberof Course
   */
  createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Course
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the Course interface.
 */
export function instanceOfCourse(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "user" in value;
  isInstance = isInstance && "classroom" in value;
  isInstance = isInstance && "subject" in value;
  isInstance = isInstance && "createdAt" in value;

  return isInstance;
}

export function CourseFromJSON(json: any): Course {
  return CourseFromJSONTyped(json, false);
}

export function CourseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Course {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    user: UserFromJSON(json["user"]),
    classroom: ClassroomFromJSON(json["classroom"]),
    subject: SubjectFromJSON(json["subject"]),
    createdAt: new Date(json["createdAt"]),
    updatedAt: !exists(json, "updatedAt")
      ? undefined
      : new Date(json["updatedAt"]),
  };
}

export function CourseToJSON(value?: Course | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    user: UserToJSON(value.user),
    classroom: ClassroomToJSON(value.classroom),
    subject: SubjectToJSON(value.subject),
    createdAt: value.createdAt.toISOString(),
    updatedAt:
      value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
  };
}
