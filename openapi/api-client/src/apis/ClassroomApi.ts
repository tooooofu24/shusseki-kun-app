/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClassroomGet200Response,
  ClassroomGet200Response1,
  ClassroomGetRequest,
  ClassroomsIdDelete200Response,
  UsersIdDelete200Response,
} from '../models';
import {
    ClassroomGet200ResponseFromJSON,
    ClassroomGet200ResponseToJSON,
    ClassroomGet200Response1FromJSON,
    ClassroomGet200Response1ToJSON,
    ClassroomGetRequestFromJSON,
    ClassroomGetRequestToJSON,
    ClassroomsIdDelete200ResponseFromJSON,
    ClassroomsIdDelete200ResponseToJSON,
    UsersIdDelete200ResponseFromJSON,
    UsersIdDelete200ResponseToJSON,
} from '../models';

export interface ClassroomGetRequest {
    xTenantUID: string;
}

export interface ClassroomPostRequest {
    xTenantUID: string;
    classroomGetRequest: ClassroomGetRequest;
}

export interface ClassroomsIdDeleteRequest {
    xTenantUID: string;
    id: number;
}

export interface ClassroomsIdGetRequest {
    xTenantUID: string;
    id: number;
}

/**
 * ClassroomApi - interface
 * 
 * @export
 * @interface ClassroomApiInterface
 */
export interface ClassroomApiInterface {
    /**
     * 
     * @summary 学級一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    classroomGetRaw(requestParameters: ClassroomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomGet200Response>>;

    /**
     * 学級一覧取得
     */
    classroomGet(requestParameters: ClassroomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomGet200Response>;

    /**
     * 
     * @summary 学級登録
     * @param {string} xTenantUID テナント識別子
     * @param {ClassroomGetRequest} classroomGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    classroomPostRaw(requestParameters: ClassroomPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomGet200Response1>>;

    /**
     * 学級登録
     */
    classroomPost(requestParameters: ClassroomPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomGet200Response1>;

    /**
     * 
     * @summary 学級削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    classroomsIdDeleteRaw(requestParameters: ClassroomsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

    /**
     * 学級削除
     */
    classroomsIdDelete(requestParameters: ClassroomsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response>;

    /**
     * 
     * @summary 学級単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    classroomsIdGetRaw(requestParameters: ClassroomsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomsIdDelete200Response>>;

    /**
     * 学級単一取得
     */
    classroomsIdGet(requestParameters: ClassroomsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomsIdDelete200Response>;

}

/**
 * 
 */
export class ClassroomApi extends runtime.BaseAPI implements ClassroomApiInterface {

    /**
     * 学級一覧取得
     */
    async classroomGetRaw(requestParameters: ClassroomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomGet200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling classroomGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassroomGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級一覧取得
     */
    async classroomGet(requestParameters: ClassroomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomGet200Response> {
        const response = await this.classroomGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級登録
     */
    async classroomPostRaw(requestParameters: ClassroomPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomGet200Response1>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling classroomPost.');
        }

        if (requestParameters.classroomGetRequest === null || requestParameters.classroomGetRequest === undefined) {
            throw new runtime.RequiredError('classroomGetRequest','Required parameter requestParameters.classroomGetRequest was null or undefined when calling classroomPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classroom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClassroomGetRequestToJSON(requestParameters.classroomGetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassroomGet200Response1FromJSON(jsonValue));
    }

    /**
     * 学級登録
     */
    async classroomPost(requestParameters: ClassroomPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomGet200Response1> {
        const response = await this.classroomPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級削除
     */
    async classroomsIdDeleteRaw(requestParameters: ClassroomsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling classroomsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classroomsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級削除
     */
    async classroomsIdDelete(requestParameters: ClassroomsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response> {
        const response = await this.classroomsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級単一取得
     */
    async classroomsIdGetRaw(requestParameters: ClassroomsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassroomsIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling classroomsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classroomsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassroomsIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級単一取得
     */
    async classroomsIdGet(requestParameters: ClassroomsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassroomsIdDelete200Response> {
        const response = await this.classroomsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
