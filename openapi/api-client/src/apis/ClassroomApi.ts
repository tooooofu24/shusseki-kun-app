/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  FindClassroom200Response,
  GetClassrooms200Response,
  PostClassroom200Response,
  PostClassroomRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    FindClassroom200ResponseFromJSON,
    FindClassroom200ResponseToJSON,
    GetClassrooms200ResponseFromJSON,
    GetClassrooms200ResponseToJSON,
    PostClassroom200ResponseFromJSON,
    PostClassroom200ResponseToJSON,
    PostClassroomRequestFromJSON,
    PostClassroomRequestToJSON,
} from '../models';

export interface DeleteClassroomRequest {
    xTenantUID: string;
    id: number;
}

export interface FindClassroomRequest {
    xTenantUID: string;
    id: number;
}

export interface GetClassroomsRequest {
    xTenantUID: string;
}

export interface PostClassroomOperationRequest {
    xTenantUID: string;
    postClassroomRequest: PostClassroomRequest;
}

/**
 * ClassroomApi - interface
 * 
 * @export
 * @interface ClassroomApiInterface
 */
export interface ClassroomApiInterface {
    /**
     * 
     * @summary 学級削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    deleteClassroomRaw(requestParameters: DeleteClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 学級削除
     */
    deleteClassroom(requestParameters: DeleteClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 学級単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    findClassroomRaw(requestParameters: FindClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindClassroom200Response>>;

    /**
     * 学級単一取得
     */
    findClassroom(requestParameters: FindClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindClassroom200Response>;

    /**
     * 
     * @summary 学級一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    getClassroomsRaw(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClassrooms200Response>>;

    /**
     * 学級一覧取得
     */
    getClassrooms(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClassrooms200Response>;

    /**
     * 
     * @summary 学級登録
     * @param {string} xTenantUID テナント識別子
     * @param {PostClassroomRequest} postClassroomRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApiInterface
     */
    postClassroomRaw(requestParameters: PostClassroomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostClassroom200Response>>;

    /**
     * 学級登録
     */
    postClassroom(requestParameters: PostClassroomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostClassroom200Response>;

}

/**
 * 
 */
export class ClassroomApi extends runtime.BaseAPI implements ClassroomApiInterface {

    /**
     * 学級削除
     */
    async deleteClassroomRaw(requestParameters: DeleteClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteClassroom.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClassroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級削除
     */
    async deleteClassroom(requestParameters: DeleteClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteClassroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級単一取得
     */
    async findClassroomRaw(requestParameters: FindClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindClassroom200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findClassroom.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findClassroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindClassroom200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級単一取得
     */
    async findClassroom(requestParameters: FindClassroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindClassroom200Response> {
        const response = await this.findClassroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級一覧取得
     */
    async getClassroomsRaw(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClassrooms200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getClassrooms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClassrooms200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級一覧取得
     */
    async getClassrooms(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClassrooms200Response> {
        const response = await this.getClassroomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 学級登録
     */
    async postClassroomRaw(requestParameters: PostClassroomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostClassroom200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling postClassroom.');
        }

        if (requestParameters.postClassroomRequest === null || requestParameters.postClassroomRequest === undefined) {
            throw new runtime.RequiredError('postClassroomRequest','Required parameter requestParameters.postClassroomRequest was null or undefined when calling postClassroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostClassroomRequestToJSON(requestParameters.postClassroomRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostClassroom200ResponseFromJSON(jsonValue));
    }

    /**
     * 学級登録
     */
    async postClassroom(requestParameters: PostClassroomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostClassroom200Response> {
        const response = await this.postClassroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
