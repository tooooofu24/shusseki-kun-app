/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  FindAttendance200Response,
  GetAttendances200Response,
  UpdateAttendanceRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    FindAttendance200ResponseFromJSON,
    FindAttendance200ResponseToJSON,
    GetAttendances200ResponseFromJSON,
    GetAttendances200ResponseToJSON,
    UpdateAttendanceRequestFromJSON,
    UpdateAttendanceRequestToJSON,
} from '../models';

export interface DeleteAttendanceRequest {
    xTenantUID: string;
    id: number;
}

export interface FindAttendanceRequest {
    xTenantUID: string;
    id: number;
}

export interface GetAttendancesRequest {
    xTenantUID: string;
    courseLogId?: number;
    studentId?: number;
    courseId?: number;
    classroomId?: number;
    subjectId?: number;
}

export interface UpdateAttendanceOperationRequest {
    xTenantUID: string;
    id: number;
    updateAttendanceRequest?: UpdateAttendanceRequest;
}

/**
 * AttendanceApi - interface
 * 
 * @export
 * @interface AttendanceApiInterface
 */
export interface AttendanceApiInterface {
    /**
     * 
     * @summary 出席情報削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApiInterface
     */
    deleteAttendanceRaw(requestParameters: DeleteAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 出席情報削除
     */
    deleteAttendance(requestParameters: DeleteAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 出席情報単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApiInterface
     */
    findAttendanceRaw(requestParameters: FindAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindAttendance200Response>>;

    /**
     * 出席情報単一取得
     */
    findAttendance(requestParameters: FindAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindAttendance200Response>;

    /**
     * 
     * @summary 出席情報一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [courseLogId] 
     * @param {number} [studentId] 
     * @param {number} [courseId] 
     * @param {number} [classroomId] 
     * @param {number} [subjectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApiInterface
     */
    getAttendancesRaw(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttendances200Response>>;

    /**
     * 出席情報一覧取得
     */
    getAttendances(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttendances200Response>;

    /**
     * 
     * @summary 出席情報更新
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {UpdateAttendanceRequest} [updateAttendanceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApiInterface
     */
    updateAttendanceRaw(requestParameters: UpdateAttendanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindAttendance200Response>>;

    /**
     * 出席情報更新
     */
    updateAttendance(requestParameters: UpdateAttendanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindAttendance200Response>;

}

/**
 * 
 */
export class AttendanceApi extends runtime.BaseAPI implements AttendanceApiInterface {

    /**
     * 出席情報削除
     */
    async deleteAttendanceRaw(requestParameters: DeleteAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteAttendance.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAttendance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attendances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 出席情報削除
     */
    async deleteAttendance(requestParameters: DeleteAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteAttendanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 出席情報単一取得
     */
    async findAttendanceRaw(requestParameters: FindAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindAttendance200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findAttendance.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findAttendance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attendances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindAttendance200ResponseFromJSON(jsonValue));
    }

    /**
     * 出席情報単一取得
     */
    async findAttendance(requestParameters: FindAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindAttendance200Response> {
        const response = await this.findAttendanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 出席情報一覧取得
     */
    async getAttendancesRaw(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttendances200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getAttendances.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseLogId !== undefined) {
            queryParameters['course-log-id'] = requestParameters.courseLogId;
        }

        if (requestParameters.studentId !== undefined) {
            queryParameters['student-id'] = requestParameters.studentId;
        }

        if (requestParameters.courseId !== undefined) {
            queryParameters['course-id'] = requestParameters.courseId;
        }

        if (requestParameters.classroomId !== undefined) {
            queryParameters['classroom-id'] = requestParameters.classroomId;
        }

        if (requestParameters.subjectId !== undefined) {
            queryParameters['subject-id'] = requestParameters.subjectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attendances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttendances200ResponseFromJSON(jsonValue));
    }

    /**
     * 出席情報一覧取得
     */
    async getAttendances(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttendances200Response> {
        const response = await this.getAttendancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 出席情報更新
     */
    async updateAttendanceRaw(requestParameters: UpdateAttendanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindAttendance200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling updateAttendance.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAttendance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attendances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAttendanceRequestToJSON(requestParameters.updateAttendanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindAttendance200ResponseFromJSON(jsonValue));
    }

    /**
     * 出席情報更新
     */
    async updateAttendance(requestParameters: UpdateAttendanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindAttendance200Response> {
        const response = await this.updateAttendanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
