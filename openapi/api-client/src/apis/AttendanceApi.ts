/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AttendancesGet200Response,
  AttendancesIdDelete200Response,
  AttendancesIdDeleteRequest,
  UsersIdDelete200Response,
} from "../models";
import {
  AttendancesGet200ResponseFromJSON,
  AttendancesGet200ResponseToJSON,
  AttendancesIdDelete200ResponseFromJSON,
  AttendancesIdDelete200ResponseToJSON,
  AttendancesIdDeleteRequestFromJSON,
  AttendancesIdDeleteRequestToJSON,
  UsersIdDelete200ResponseFromJSON,
  UsersIdDelete200ResponseToJSON,
} from "../models";

export interface AttendancesGetRequest {
  xTenantUID: string;
  courseLogId?: number;
  studentId?: number;
  courseId?: number;
  classroomId?: number;
  subjectId?: number;
}

export interface AttendancesIdDeleteRequest {
  xTenantUID: string;
  id: number;
}

export interface AttendancesIdGetRequest {
  xTenantUID: string;
  id: number;
}

export interface AttendancesIdPutRequest {
  xTenantUID: string;
  id: number;
  attendancesIdDeleteRequest?: AttendancesIdDeleteRequest;
}

/**
 * AttendanceApi - interface
 *
 * @export
 * @interface AttendanceApiInterface
 */
export interface AttendanceApiInterface {
  /**
   *
   * @summary 出席情報一覧取得
   * @param {string} xTenantUID テナント識別子
   * @param {number} [courseLogId]
   * @param {number} [studentId]
   * @param {number} [courseId]
   * @param {number} [classroomId]
   * @param {number} [subjectId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttendanceApiInterface
   */
  attendancesGetRaw(
    requestParameters: AttendancesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesGet200Response>>;

  /**
   * 出席情報一覧取得
   */
  attendancesGet(
    requestParameters: AttendancesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesGet200Response>;

  /**
   *
   * @summary 出席情報削除
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttendanceApiInterface
   */
  attendancesIdDeleteRaw(
    requestParameters: AttendancesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

  /**
   * 出席情報削除
   */
  attendancesIdDelete(
    requestParameters: AttendancesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response>;

  /**
   *
   * @summary 出席情報単一取得
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttendanceApiInterface
   */
  attendancesIdGetRaw(
    requestParameters: AttendancesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesIdDelete200Response>>;

  /**
   * 出席情報単一取得
   */
  attendancesIdGet(
    requestParameters: AttendancesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesIdDelete200Response>;

  /**
   *
   * @summary 出席情報更新
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {AttendancesIdDeleteRequest} [attendancesIdDeleteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttendanceApiInterface
   */
  attendancesIdPutRaw(
    requestParameters: AttendancesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesIdDelete200Response>>;

  /**
   * 出席情報更新
   */
  attendancesIdPut(
    requestParameters: AttendancesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesIdDelete200Response>;
}

/**
 *
 */
export class AttendanceApi
  extends runtime.BaseAPI
  implements AttendanceApiInterface
{
  /**
   * 出席情報一覧取得
   */
  async attendancesGetRaw(
    requestParameters: AttendancesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesGet200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling attendancesGet."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.courseLogId !== undefined) {
      queryParameters["course-log-id"] = requestParameters.courseLogId;
    }

    if (requestParameters.studentId !== undefined) {
      queryParameters["student-id"] = requestParameters.studentId;
    }

    if (requestParameters.courseId !== undefined) {
      queryParameters["course-id"] = requestParameters.courseId;
    }

    if (requestParameters.classroomId !== undefined) {
      queryParameters["classroom-id"] = requestParameters.classroomId;
    }

    if (requestParameters.subjectId !== undefined) {
      queryParameters["subject-id"] = requestParameters.subjectId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/attendances`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AttendancesGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 出席情報一覧取得
   */
  async attendancesGet(
    requestParameters: AttendancesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesGet200Response> {
    const response = await this.attendancesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 出席情報削除
   */
  async attendancesIdDeleteRaw(
    requestParameters: AttendancesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling attendancesIdDelete."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling attendancesIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/attendances/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UsersIdDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 出席情報削除
   */
  async attendancesIdDelete(
    requestParameters: AttendancesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response> {
    const response = await this.attendancesIdDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 出席情報単一取得
   */
  async attendancesIdGetRaw(
    requestParameters: AttendancesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesIdDelete200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling attendancesIdGet."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling attendancesIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/attendances/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AttendancesIdDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 出席情報単一取得
   */
  async attendancesIdGet(
    requestParameters: AttendancesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesIdDelete200Response> {
    const response = await this.attendancesIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 出席情報更新
   */
  async attendancesIdPutRaw(
    requestParameters: AttendancesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AttendancesIdDelete200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling attendancesIdPut."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling attendancesIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/attendances/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: AttendancesIdDeleteRequestToJSON(
          requestParameters.attendancesIdDeleteRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AttendancesIdDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 出席情報更新
   */
  async attendancesIdPut(
    requestParameters: AttendancesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AttendancesIdDelete200Response> {
    const response = await this.attendancesIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
