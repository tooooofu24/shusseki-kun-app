/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { SubjectsGet200Response } from "../models";
import {
  SubjectsGet200ResponseFromJSON,
  SubjectsGet200ResponseToJSON,
} from "../models";

export interface SubjectsGetRequest {
  xTenantUID: string;
}

/**
 * SubjectApi - interface
 *
 * @export
 * @interface SubjectApiInterface
 */
export interface SubjectApiInterface {
  /**
   *
   * @summary 科目一覧取得
   * @param {string} xTenantUID テナント識別子
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubjectApiInterface
   */
  subjectsGetRaw(
    requestParameters: SubjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SubjectsGet200Response>>;

  /**
   * 科目一覧取得
   */
  subjectsGet(
    requestParameters: SubjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SubjectsGet200Response>;
}

/**
 *
 */
export class SubjectApi extends runtime.BaseAPI implements SubjectApiInterface {
  /**
   * 科目一覧取得
   */
  async subjectsGetRaw(
    requestParameters: SubjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SubjectsGet200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling subjectsGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subjects`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubjectsGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 科目一覧取得
   */
  async subjectsGet(
    requestParameters: SubjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SubjectsGet200Response> {
    const response = await this.subjectsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
