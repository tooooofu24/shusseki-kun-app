/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetSubjects200Response,
} from '../models';
import {
    GetSubjects200ResponseFromJSON,
    GetSubjects200ResponseToJSON,
} from '../models';

export interface GetSubjectsRequest {
    xTenantUID: string;
}

/**
 * SubjectApi - interface
 * 
 * @export
 * @interface SubjectApiInterface
 */
export interface SubjectApiInterface {
    /**
     * 
     * @summary 科目一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApiInterface
     */
    getSubjectsRaw(requestParameters: GetSubjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubjects200Response>>;

    /**
     * 科目一覧取得
     */
    getSubjects(requestParameters: GetSubjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubjects200Response>;

}

/**
 * 
 */
export class SubjectApi extends runtime.BaseAPI implements SubjectApiInterface {

    /**
     * 科目一覧取得
     */
    async getSubjectsRaw(requestParameters: GetSubjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubjects200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getSubjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubjects200ResponseFromJSON(jsonValue));
    }

    /**
     * 科目一覧取得
     */
    async getSubjects(requestParameters: GetSubjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubjects200Response> {
        const response = await this.getSubjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
