/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  GetInvitations200Response,
  PostInvitation200Response,
  PostInvitationRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    GetInvitations200ResponseFromJSON,
    GetInvitations200ResponseToJSON,
    PostInvitation200ResponseFromJSON,
    PostInvitation200ResponseToJSON,
    PostInvitationRequestFromJSON,
    PostInvitationRequestToJSON,
} from '../models';

export interface DeleteInvitationRequest {
    xTenantUID: string;
    id: number;
}

export interface FindInvitationRequest {
    xTenantUID: string;
    id: number;
}

export interface GetInvitationsRequest {
    xTenantUID: string;
    accept?: boolean;
}

export interface PostInvitationOperationRequest {
    xTenantUID: string;
    postInvitationRequest: PostInvitationRequest;
}

export interface SendInvitationMailRequest {
    xTenantUID: string;
    id: number;
}

/**
 * InvitationApi - interface
 * 
 * @export
 * @interface InvitationApiInterface
 */
export interface InvitationApiInterface {
    /**
     * 
     * @summary 招待削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiInterface
     */
    deleteInvitationRaw(requestParameters: DeleteInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 招待削除
     */
    deleteInvitation(requestParameters: DeleteInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 招待単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiInterface
     */
    findInvitationRaw(requestParameters: FindInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostInvitation200Response>>;

    /**
     * 招待単一取得
     */
    findInvitation(requestParameters: FindInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostInvitation200Response>;

    /**
     * 
     * @summary 招待一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {boolean} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiInterface
     */
    getInvitationsRaw(requestParameters: GetInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInvitations200Response>>;

    /**
     * 招待一覧取得
     */
    getInvitations(requestParameters: GetInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInvitations200Response>;

    /**
     * 
     * @summary 招待登録
     * @param {string} xTenantUID テナント識別子
     * @param {PostInvitationRequest} postInvitationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiInterface
     */
    postInvitationRaw(requestParameters: PostInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostInvitation200Response>>;

    /**
     * 招待登録
     */
    postInvitation(requestParameters: PostInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostInvitation200Response>;

    /**
     * 
     * @summary 招待メールを再送
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiInterface
     */
    sendInvitationMailRaw(requestParameters: SendInvitationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 招待メールを再送
     */
    sendInvitationMail(requestParameters: SendInvitationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

}

/**
 * 
 */
export class InvitationApi extends runtime.BaseAPI implements InvitationApiInterface {

    /**
     * 招待削除
     */
    async deleteInvitationRaw(requestParameters: DeleteInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 招待削除
     */
    async deleteInvitation(requestParameters: DeleteInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 招待単一取得
     */
    async findInvitationRaw(requestParameters: FindInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostInvitation200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostInvitation200ResponseFromJSON(jsonValue));
    }

    /**
     * 招待単一取得
     */
    async findInvitation(requestParameters: FindInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostInvitation200Response> {
        const response = await this.findInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 招待一覧取得
     */
    async getInvitationsRaw(requestParameters: GetInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInvitations200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getInvitations.');
        }

        const queryParameters: any = {};

        if (requestParameters.accept !== undefined) {
            queryParameters['accept'] = requestParameters.accept;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvitations200ResponseFromJSON(jsonValue));
    }

    /**
     * 招待一覧取得
     */
    async getInvitations(requestParameters: GetInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInvitations200Response> {
        const response = await this.getInvitationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 招待登録
     */
    async postInvitationRaw(requestParameters: PostInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostInvitation200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling postInvitation.');
        }

        if (requestParameters.postInvitationRequest === null || requestParameters.postInvitationRequest === undefined) {
            throw new runtime.RequiredError('postInvitationRequest','Required parameter requestParameters.postInvitationRequest was null or undefined when calling postInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostInvitationRequestToJSON(requestParameters.postInvitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostInvitation200ResponseFromJSON(jsonValue));
    }

    /**
     * 招待登録
     */
    async postInvitation(requestParameters: PostInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostInvitation200Response> {
        const response = await this.postInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 招待メールを再送
     */
    async sendInvitationMailRaw(requestParameters: SendInvitationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling sendInvitationMail.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sendInvitationMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invitations/{id}/resend`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 招待メールを再送
     */
    async sendInvitationMail(requestParameters: SendInvitationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.sendInvitationMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
