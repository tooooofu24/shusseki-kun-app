/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  FindCourse200Response,
  GetCourses200Response,
  PostCourse200Response,
  PostCourseRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    FindCourse200ResponseFromJSON,
    FindCourse200ResponseToJSON,
    GetCourses200ResponseFromJSON,
    GetCourses200ResponseToJSON,
    PostCourse200ResponseFromJSON,
    PostCourse200ResponseToJSON,
    PostCourseRequestFromJSON,
    PostCourseRequestToJSON,
} from '../models';

export interface DeleteCourseRequest {
    xTenantUID: string;
    id: number;
}

export interface FindCourseRequest {
    xTenantUID: string;
    id: number;
}

export interface GetCoursesRequest {
    xTenantUID: string;
    classroomId?: number;
    subjectId?: number;
}

export interface PostCourseOperationRequest {
    xTenantUID: string;
    postCourseRequest: PostCourseRequest;
}

/**
 * CourseApi - interface
 * 
 * @export
 * @interface CourseApiInterface
 */
export interface CourseApiInterface {
    /**
     * 
     * @summary 授業削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 授業削除
     */
    deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 授業単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    findCourseRaw(requestParameters: FindCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourse200Response>>;

    /**
     * 授業単一取得
     */
    findCourse(requestParameters: FindCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourse200Response>;

    /**
     * 
     * @summary 授業一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [classroomId] 
     * @param {number} [subjectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    getCoursesRaw(requestParameters: GetCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCourses200Response>>;

    /**
     * 授業一覧取得
     */
    getCourses(requestParameters: GetCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCourses200Response>;

    /**
     * 
     * @summary 授業登録
     * @param {string} xTenantUID テナント識別子
     * @param {PostCourseRequest} postCourseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    postCourseRaw(requestParameters: PostCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCourse200Response>>;

    /**
     * 授業登録
     */
    postCourse(requestParameters: PostCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCourse200Response>;

}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI implements CourseApiInterface {

    /**
     * 授業削除
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteCourse.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業削除
     */
    async deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業単一取得
     */
    async findCourseRaw(requestParameters: FindCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourse200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findCourse.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業単一取得
     */
    async findCourse(requestParameters: FindCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourse200Response> {
        const response = await this.findCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業一覧取得
     */
    async getCoursesRaw(requestParameters: GetCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCourses200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getCourses.');
        }

        const queryParameters: any = {};

        if (requestParameters.classroomId !== undefined) {
            queryParameters['classroom-id'] = requestParameters.classroomId;
        }

        if (requestParameters.subjectId !== undefined) {
            queryParameters['subject-id'] = requestParameters.subjectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業一覧取得
     */
    async getCourses(requestParameters: GetCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCourses200Response> {
        const response = await this.getCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業登録
     */
    async postCourseRaw(requestParameters: PostCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCourse200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling postCourse.');
        }

        if (requestParameters.postCourseRequest === null || requestParameters.postCourseRequest === undefined) {
            throw new runtime.RequiredError('postCourseRequest','Required parameter requestParameters.postCourseRequest was null or undefined when calling postCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCourseRequestToJSON(requestParameters.postCourseRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業登録
     */
    async postCourse(requestParameters: PostCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCourse200Response> {
        const response = await this.postCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
