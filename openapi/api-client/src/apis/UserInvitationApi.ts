/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  InvitationsGet200Response,
  InvitationsGet200Response1,
  InvitationsGetRequest,
  UsersIdDelete200Response,
} from "../models";
import {
  InvitationsGet200ResponseFromJSON,
  InvitationsGet200ResponseToJSON,
  InvitationsGet200Response1FromJSON,
  InvitationsGet200Response1ToJSON,
  InvitationsGetRequestFromJSON,
  InvitationsGetRequestToJSON,
  UsersIdDelete200ResponseFromJSON,
  UsersIdDelete200ResponseToJSON,
} from "../models";

export interface InvitationsGetRequest {
  xTenantUID: string;
}

export interface InvitationsIdDeleteRequest {
  xTenantUID: string;
  id: number;
}

export interface InvitationsIdGetRequest {
  xTenantUID: string;
  id: number;
}

export interface InvitationsIdResendPostRequest {
  xTenantUID: string;
  id: number;
}

export interface InvitationsPostRequest {
  xTenantUID: string;
  invitationsGetRequest: InvitationsGetRequest;
}

/**
 * UserInvitationApi - interface
 *
 * @export
 * @interface UserInvitationApiInterface
 */
export interface UserInvitationApiInterface {
  /**
   *
   * @summary 招待一覧取得
   * @param {string} xTenantUID テナント識別子
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInvitationApiInterface
   */
  invitationsGetRaw(
    requestParameters: InvitationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response>>;

  /**
   * 招待一覧取得
   */
  invitationsGet(
    requestParameters: InvitationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response>;

  /**
   *
   * @summary 招待削除
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInvitationApiInterface
   */
  invitationsIdDeleteRaw(
    requestParameters: InvitationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

  /**
   * 招待削除
   */
  invitationsIdDelete(
    requestParameters: InvitationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response>;

  /**
   *
   * @summary 招待単一取得
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInvitationApiInterface
   */
  invitationsIdGetRaw(
    requestParameters: InvitationsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response1>>;

  /**
   * 招待単一取得
   */
  invitationsIdGet(
    requestParameters: InvitationsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response1>;

  /**
   *
   * @summary 招待メールを再送
   * @param {string} xTenantUID テナント識別子
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInvitationApiInterface
   */
  invitationsIdResendPostRaw(
    requestParameters: InvitationsIdResendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

  /**
   * 招待メールを再送
   */
  invitationsIdResendPost(
    requestParameters: InvitationsIdResendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response>;

  /**
   *
   * @summary 招待登録
   * @param {string} xTenantUID テナント識別子
   * @param {InvitationsGetRequest} invitationsGetRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserInvitationApiInterface
   */
  invitationsPostRaw(
    requestParameters: InvitationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response1>>;

  /**
   * 招待登録
   */
  invitationsPost(
    requestParameters: InvitationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response1>;
}

/**
 *
 */
export class UserInvitationApi
  extends runtime.BaseAPI
  implements UserInvitationApiInterface
{
  /**
   * 招待一覧取得
   */
  async invitationsGetRaw(
    requestParameters: InvitationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling invitationsGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/invitations`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InvitationsGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 招待一覧取得
   */
  async invitationsGet(
    requestParameters: InvitationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response> {
    const response = await this.invitationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 招待削除
   */
  async invitationsIdDeleteRaw(
    requestParameters: InvitationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling invitationsIdDelete."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling invitationsIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/invitations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UsersIdDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 招待削除
   */
  async invitationsIdDelete(
    requestParameters: InvitationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response> {
    const response = await this.invitationsIdDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 招待単一取得
   */
  async invitationsIdGetRaw(
    requestParameters: InvitationsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response1>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling invitationsIdGet."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling invitationsIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/invitations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InvitationsGet200Response1FromJSON(jsonValue)
    );
  }

  /**
   * 招待単一取得
   */
  async invitationsIdGet(
    requestParameters: InvitationsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response1> {
    const response = await this.invitationsIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 招待メールを再送
   */
  async invitationsIdResendPostRaw(
    requestParameters: InvitationsIdResendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling invitationsIdResendPost."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling invitationsIdResendPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/invitations/{id}/resend`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UsersIdDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * 招待メールを再送
   */
  async invitationsIdResendPost(
    requestParameters: InvitationsIdResendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UsersIdDelete200Response> {
    const response = await this.invitationsIdResendPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * 招待登録
   */
  async invitationsPostRaw(
    requestParameters: InvitationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<InvitationsGet200Response1>> {
    if (
      requestParameters.xTenantUID === null ||
      requestParameters.xTenantUID === undefined
    ) {
      throw new runtime.RequiredError(
        "xTenantUID",
        "Required parameter requestParameters.xTenantUID was null or undefined when calling invitationsPost."
      );
    }

    if (
      requestParameters.invitationsGetRequest === null ||
      requestParameters.invitationsGetRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "invitationsGetRequest",
        "Required parameter requestParameters.invitationsGetRequest was null or undefined when calling invitationsPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.xTenantUID !== undefined &&
      requestParameters.xTenantUID !== null
    ) {
      headerParameters["X-Tenant-UID"] = String(requestParameters.xTenantUID);
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("Bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/invitations`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InvitationsGetRequestToJSON(
          requestParameters.invitationsGetRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InvitationsGet200Response1FromJSON(jsonValue)
    );
  }

  /**
   * 招待登録
   */
  async invitationsPost(
    requestParameters: InvitationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<InvitationsGet200Response1> {
    const response = await this.invitationsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
