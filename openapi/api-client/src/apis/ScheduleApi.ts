/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * 出席くんAPI
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: tkc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  FindSchedule200Response,
  GetSchedules200Response,
  PostSchedule200Response,
  PostScheduleRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    FindSchedule200ResponseFromJSON,
    FindSchedule200ResponseToJSON,
    GetSchedules200ResponseFromJSON,
    GetSchedules200ResponseToJSON,
    PostSchedule200ResponseFromJSON,
    PostSchedule200ResponseToJSON,
    PostScheduleRequestFromJSON,
    PostScheduleRequestToJSON,
} from '../models';

export interface DeleteScheduleRequest {
    xTenantUID: string;
    id: number;
}

export interface FindScheduleRequest {
    xTenantUID: string;
    id: number;
}

export interface GetSchedulesRequest {
    xTenantUID: string;
    courseId?: number;
    day?: number;
    period?: number;
}

export interface PostScheduleOperationRequest {
    xTenantUID: string;
    postScheduleRequest: PostScheduleRequest;
}

/**
 * ScheduleApi - interface
 * 
 * @export
 * @interface ScheduleApiInterface
 */
export interface ScheduleApiInterface {
    /**
     * 
     * @summary 時間割削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    deleteScheduleRaw(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 時間割削除
     */
    deleteSchedule(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 時間割単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    findScheduleRaw(requestParameters: FindScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindSchedule200Response>>;

    /**
     * 時間割単一取得
     */
    findSchedule(requestParameters: FindScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindSchedule200Response>;

    /**
     * 
     * @summary 時間割一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [courseId] 
     * @param {number} [day] 1&#x3D;月, 2&#x3D;火, 3&#x3D;水, ..., 7&#x3D;日
     * @param {number} [period] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    getSchedulesRaw(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSchedules200Response>>;

    /**
     * 時間割一覧取得
     */
    getSchedules(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSchedules200Response>;

    /**
     * 
     * @summary 時間割登録
     * @param {string} xTenantUID テナント識別子
     * @param {PostScheduleRequest} postScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    postScheduleRaw(requestParameters: PostScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostSchedule200Response>>;

    /**
     * 時間割登録
     */
    postSchedule(requestParameters: PostScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostSchedule200Response>;

}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI implements ScheduleApiInterface {

    /**
     * 時間割削除
     */
    async deleteScheduleRaw(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteSchedule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割削除
     */
    async deleteSchedule(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割単一取得
     */
    async findScheduleRaw(requestParameters: FindScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindSchedule200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findSchedule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割単一取得
     */
    async findSchedule(requestParameters: FindScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindSchedule200Response> {
        const response = await this.findScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割一覧取得
     */
    async getSchedulesRaw(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSchedules200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getSchedules.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseId !== undefined) {
            queryParameters['course-id'] = requestParameters.courseId;
        }

        if (requestParameters.day !== undefined) {
            queryParameters['day'] = requestParameters.day;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSchedules200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割一覧取得
     */
    async getSchedules(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSchedules200Response> {
        const response = await this.getSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割登録
     */
    async postScheduleRaw(requestParameters: PostScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostSchedule200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling postSchedule.');
        }

        if (requestParameters.postScheduleRequest === null || requestParameters.postScheduleRequest === undefined) {
            throw new runtime.RequiredError('postScheduleRequest','Required parameter requestParameters.postScheduleRequest was null or undefined when calling postSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostScheduleRequestToJSON(requestParameters.postScheduleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割登録
     */
    async postSchedule(requestParameters: PostScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostSchedule200Response> {
        const response = await this.postScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
