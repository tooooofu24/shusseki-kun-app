/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchedulesGet200Response,
  SchedulesGet200Response1,
  SchedulesGetRequest,
  UsersIdDelete200Response,
} from '../models';
import {
    SchedulesGet200ResponseFromJSON,
    SchedulesGet200ResponseToJSON,
    SchedulesGet200Response1FromJSON,
    SchedulesGet200Response1ToJSON,
    SchedulesGetRequestFromJSON,
    SchedulesGetRequestToJSON,
    UsersIdDelete200ResponseFromJSON,
    UsersIdDelete200ResponseToJSON,
} from '../models';

export interface SchedulesGetRequest {
    xTenantUID: string;
    courseId?: number;
    day?: number;
    period?: number;
}

export interface SchedulesIdDeleteRequest {
    xTenantUID: string;
    id: number;
}

export interface SchedulesIdGetRequest {
    xTenantUID: string;
    id: number;
}

export interface SchedulesPostRequest {
    xTenantUID: string;
    schedulesGetRequest: SchedulesGetRequest;
}

/**
 * ScheduleApi - interface
 * 
 * @export
 * @interface ScheduleApiInterface
 */
export interface ScheduleApiInterface {
    /**
     * 
     * @summary 時間割一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [courseId] 
     * @param {number} [day] 1&#x3D;月, 2&#x3D;火, 3&#x3D;水, ..., 7&#x3D;日
     * @param {number} [period] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    schedulesGetRaw(requestParameters: SchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response>>;

    /**
     * 時間割一覧取得
     */
    schedulesGet(requestParameters: SchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response>;

    /**
     * 
     * @summary 時間割削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    schedulesIdDeleteRaw(requestParameters: SchedulesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

    /**
     * 時間割削除
     */
    schedulesIdDelete(requestParameters: SchedulesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response>;

    /**
     * 
     * @summary 時間割単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    schedulesIdGetRaw(requestParameters: SchedulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response1>>;

    /**
     * 時間割単一取得
     */
    schedulesIdGet(requestParameters: SchedulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response1>;

    /**
     * 
     * @summary 時間割登録
     * @param {string} xTenantUID テナント識別子
     * @param {SchedulesGetRequest} schedulesGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    schedulesPostRaw(requestParameters: SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response1>>;

    /**
     * 時間割登録
     */
    schedulesPost(requestParameters: SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response1>;

}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI implements ScheduleApiInterface {

    /**
     * 時間割一覧取得
     */
    async schedulesGetRaw(requestParameters: SchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling schedulesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseId !== undefined) {
            queryParameters['course-id'] = requestParameters.courseId;
        }

        if (requestParameters.day !== undefined) {
            queryParameters['day'] = requestParameters.day;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchedulesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割一覧取得
     */
    async schedulesGet(requestParameters: SchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response> {
        const response = await this.schedulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割削除
     */
    async schedulesIdDeleteRaw(requestParameters: SchedulesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling schedulesIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling schedulesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 時間割削除
     */
    async schedulesIdDelete(requestParameters: SchedulesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response> {
        const response = await this.schedulesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割単一取得
     */
    async schedulesIdGetRaw(requestParameters: SchedulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response1>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling schedulesIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling schedulesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchedulesGet200Response1FromJSON(jsonValue));
    }

    /**
     * 時間割単一取得
     */
    async schedulesIdGet(requestParameters: SchedulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response1> {
        const response = await this.schedulesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 時間割登録
     */
    async schedulesPostRaw(requestParameters: SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchedulesGet200Response1>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling schedulesPost.');
        }

        if (requestParameters.schedulesGetRequest === null || requestParameters.schedulesGetRequest === undefined) {
            throw new runtime.RequiredError('schedulesGetRequest','Required parameter requestParameters.schedulesGetRequest was null or undefined when calling schedulesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchedulesGetRequestToJSON(requestParameters.schedulesGetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchedulesGet200Response1FromJSON(jsonValue));
    }

    /**
     * 時間割登録
     */
    async schedulesPost(requestParameters: SchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchedulesGet200Response1> {
        const response = await this.schedulesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
