/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseLogsGet200Response,
  CourseLogsGetRequest,
  CourseLogsIdDelete200Response,
  CourseLogsIdDeleteRequest,
  CoursesGet200Response1,
  UsersIdDelete200Response,
} from '../models';
import {
    CourseLogsGet200ResponseFromJSON,
    CourseLogsGet200ResponseToJSON,
    CourseLogsGetRequestFromJSON,
    CourseLogsGetRequestToJSON,
    CourseLogsIdDelete200ResponseFromJSON,
    CourseLogsIdDelete200ResponseToJSON,
    CourseLogsIdDeleteRequestFromJSON,
    CourseLogsIdDeleteRequestToJSON,
    CoursesGet200Response1FromJSON,
    CoursesGet200Response1ToJSON,
    UsersIdDelete200ResponseFromJSON,
    UsersIdDelete200ResponseToJSON,
} from '../models';

export interface CourseLogsGetRequest {
    xTenantUID: string;
    courseId?: number;
    period?: number;
    minDate?: Date;
    maxDate?: Date;
}

export interface CourseLogsIdDeleteRequest {
    xTenantUID: string;
    id: number;
}

export interface CourseLogsIdGetRequest {
    xTenantUID: string;
    id: number;
}

export interface CourseLogsIdPutRequest {
    xTenantUID: string;
    id: number;
    courseLogsIdDeleteRequest?: CourseLogsIdDeleteRequest;
}

export interface CourseLogsPostRequest {
    xTenantUID: string;
    courseLogsGetRequest: CourseLogsGetRequest;
}

/**
 * CourseLogApi - interface
 * 
 * @export
 * @interface CourseLogApiInterface
 */
export interface CourseLogApiInterface {
    /**
     * 
     * @summary 授業記録一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [courseId] 
     * @param {number} [period] 
     * @param {Date} [minDate] 
     * @param {Date} [maxDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    courseLogsGetRaw(requestParameters: CourseLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsGet200Response>>;

    /**
     * 授業記録一覧取得
     */
    courseLogsGet(requestParameters: CourseLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsGet200Response>;

    /**
     * 
     * @summary 授業記録削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    courseLogsIdDeleteRaw(requestParameters: CourseLogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>>;

    /**
     * 授業記録削除
     */
    courseLogsIdDelete(requestParameters: CourseLogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response>;

    /**
     * 
     * @summary 授業記録単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    courseLogsIdGetRaw(requestParameters: CourseLogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsIdDelete200Response>>;

    /**
     * 授業記録単一取得
     */
    courseLogsIdGet(requestParameters: CourseLogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsIdDelete200Response>;

    /**
     * 
     * @summary 授業記録更新
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {CourseLogsIdDeleteRequest} [courseLogsIdDeleteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    courseLogsIdPutRaw(requestParameters: CourseLogsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsIdDelete200Response>>;

    /**
     * 授業記録更新
     */
    courseLogsIdPut(requestParameters: CourseLogsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsIdDelete200Response>;

    /**
     * 
     * @summary 授業記録登録
     * @param {string} xTenantUID テナント識別子
     * @param {CourseLogsGetRequest} courseLogsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    courseLogsPostRaw(requestParameters: CourseLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoursesGet200Response1>>;

    /**
     * 授業記録登録
     */
    courseLogsPost(requestParameters: CourseLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoursesGet200Response1>;

}

/**
 * 
 */
export class CourseLogApi extends runtime.BaseAPI implements CourseLogApiInterface {

    /**
     * 授業記録一覧取得
     */
    async courseLogsGetRaw(requestParameters: CourseLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsGet200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling courseLogsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseId !== undefined) {
            queryParameters['course-id'] = requestParameters.courseId;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['min-date'] = (requestParameters.minDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max-date'] = (requestParameters.maxDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseLogsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録一覧取得
     */
    async courseLogsGet(requestParameters: CourseLogsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsGet200Response> {
        const response = await this.courseLogsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録削除
     */
    async courseLogsIdDeleteRaw(requestParameters: CourseLogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling courseLogsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling courseLogsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録削除
     */
    async courseLogsIdDelete(requestParameters: CourseLogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersIdDelete200Response> {
        const response = await this.courseLogsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録単一取得
     */
    async courseLogsIdGetRaw(requestParameters: CourseLogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling courseLogsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling courseLogsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseLogsIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録単一取得
     */
    async courseLogsIdGet(requestParameters: CourseLogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsIdDelete200Response> {
        const response = await this.courseLogsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録更新
     */
    async courseLogsIdPutRaw(requestParameters: CourseLogsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseLogsIdDelete200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling courseLogsIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling courseLogsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CourseLogsIdDeleteRequestToJSON(requestParameters.courseLogsIdDeleteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseLogsIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録更新
     */
    async courseLogsIdPut(requestParameters: CourseLogsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseLogsIdDelete200Response> {
        const response = await this.courseLogsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録登録
     */
    async courseLogsPostRaw(requestParameters: CourseLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoursesGet200Response1>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling courseLogsPost.');
        }

        if (requestParameters.courseLogsGetRequest === null || requestParameters.courseLogsGetRequest === undefined) {
            throw new runtime.RequiredError('courseLogsGetRequest','Required parameter requestParameters.courseLogsGetRequest was null or undefined when calling courseLogsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseLogsGetRequestToJSON(requestParameters.courseLogsGetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoursesGet200Response1FromJSON(jsonValue));
    }

    /**
     * 授業記録登録
     */
    async courseLogsPost(requestParameters: CourseLogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoursesGet200Response1> {
        const response = await this.courseLogsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
