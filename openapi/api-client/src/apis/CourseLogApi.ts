/* tslint:disable */
/* eslint-disable */
/**
 * 出席くんAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUser200Response,
  FindCourseLog200Response,
  GetCourseLogs200Response,
  PostCourse200Response,
  PostCourseLogsRequest,
  UpdateCourseLogRequest,
} from '../models';
import {
    DeleteUser200ResponseFromJSON,
    DeleteUser200ResponseToJSON,
    FindCourseLog200ResponseFromJSON,
    FindCourseLog200ResponseToJSON,
    GetCourseLogs200ResponseFromJSON,
    GetCourseLogs200ResponseToJSON,
    PostCourse200ResponseFromJSON,
    PostCourse200ResponseToJSON,
    PostCourseLogsRequestFromJSON,
    PostCourseLogsRequestToJSON,
    UpdateCourseLogRequestFromJSON,
    UpdateCourseLogRequestToJSON,
} from '../models';

export interface DeleteCourseLogRequest {
    xTenantUID: string;
    id: number;
}

export interface FindCourseLogRequest {
    xTenantUID: string;
    id: number;
}

export interface GetCourseLogsRequest {
    xTenantUID: string;
    courseId?: number;
    period?: number;
    minDate?: Date;
    maxDate?: Date;
}

export interface PostCourseLogsOperationRequest {
    xTenantUID: string;
    postCourseLogsRequest: PostCourseLogsRequest;
}

export interface UpdateCourseLogOperationRequest {
    xTenantUID: string;
    id: number;
    updateCourseLogRequest?: UpdateCourseLogRequest;
}

/**
 * CourseLogApi - interface
 * 
 * @export
 * @interface CourseLogApiInterface
 */
export interface CourseLogApiInterface {
    /**
     * 
     * @summary 授業記録削除
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    deleteCourseLogRaw(requestParameters: DeleteCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>>;

    /**
     * 授業記録削除
     */
    deleteCourseLog(requestParameters: DeleteCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response>;

    /**
     * 
     * @summary 授業記録単一取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    findCourseLogRaw(requestParameters: FindCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourseLog200Response>>;

    /**
     * 授業記録単一取得
     */
    findCourseLog(requestParameters: FindCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourseLog200Response>;

    /**
     * 
     * @summary 授業記録一覧取得
     * @param {string} xTenantUID テナント識別子
     * @param {number} [courseId] 
     * @param {number} [period] 
     * @param {Date} [minDate] 
     * @param {Date} [maxDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    getCourseLogsRaw(requestParameters: GetCourseLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCourseLogs200Response>>;

    /**
     * 授業記録一覧取得
     */
    getCourseLogs(requestParameters: GetCourseLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCourseLogs200Response>;

    /**
     * 
     * @summary 授業記録登録
     * @param {string} xTenantUID テナント識別子
     * @param {PostCourseLogsRequest} postCourseLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    postCourseLogsRaw(requestParameters: PostCourseLogsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCourse200Response>>;

    /**
     * 授業記録登録
     */
    postCourseLogs(requestParameters: PostCourseLogsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCourse200Response>;

    /**
     * 
     * @summary 授業記録更新
     * @param {string} xTenantUID テナント識別子
     * @param {number} id 
     * @param {UpdateCourseLogRequest} [updateCourseLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseLogApiInterface
     */
    updateCourseLogRaw(requestParameters: UpdateCourseLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourseLog200Response>>;

    /**
     * 授業記録更新
     */
    updateCourseLog(requestParameters: UpdateCourseLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourseLog200Response>;

}

/**
 * 
 */
export class CourseLogApi extends runtime.BaseAPI implements CourseLogApiInterface {

    /**
     * 授業記録削除
     */
    async deleteCourseLogRaw(requestParameters: DeleteCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUser200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling deleteCourseLog.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCourseLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録削除
     */
    async deleteCourseLog(requestParameters: DeleteCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUser200Response> {
        const response = await this.deleteCourseLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録単一取得
     */
    async findCourseLogRaw(requestParameters: FindCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourseLog200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling findCourseLog.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCourseLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindCourseLog200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録単一取得
     */
    async findCourseLog(requestParameters: FindCourseLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourseLog200Response> {
        const response = await this.findCourseLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録一覧取得
     */
    async getCourseLogsRaw(requestParameters: GetCourseLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCourseLogs200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling getCourseLogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseId !== undefined) {
            queryParameters['course-id'] = requestParameters.courseId;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['min-date'] = (requestParameters.minDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['max-date'] = (requestParameters.maxDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCourseLogs200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録一覧取得
     */
    async getCourseLogs(requestParameters: GetCourseLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCourseLogs200Response> {
        const response = await this.getCourseLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録登録
     */
    async postCourseLogsRaw(requestParameters: PostCourseLogsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCourse200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling postCourseLogs.');
        }

        if (requestParameters.postCourseLogsRequest === null || requestParameters.postCourseLogsRequest === undefined) {
            throw new runtime.RequiredError('postCourseLogsRequest','Required parameter requestParameters.postCourseLogsRequest was null or undefined when calling postCourseLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCourseLogsRequestToJSON(requestParameters.postCourseLogsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録登録
     */
    async postCourseLogs(requestParameters: PostCourseLogsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCourse200Response> {
        const response = await this.postCourseLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授業記録更新
     */
    async updateCourseLogRaw(requestParameters: UpdateCourseLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindCourseLog200Response>> {
        if (requestParameters.xTenantUID === null || requestParameters.xTenantUID === undefined) {
            throw new runtime.RequiredError('xTenantUID','Required parameter requestParameters.xTenantUID was null or undefined when calling updateCourseLog.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCourseLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTenantUID !== undefined && requestParameters.xTenantUID !== null) {
            headerParameters['X-Tenant-UID'] = String(requestParameters.xTenantUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/course-logs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCourseLogRequestToJSON(requestParameters.updateCourseLogRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindCourseLog200ResponseFromJSON(jsonValue));
    }

    /**
     * 授業記録更新
     */
    async updateCourseLog(requestParameters: UpdateCourseLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindCourseLog200Response> {
        const response = await this.updateCourseLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
